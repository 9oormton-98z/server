plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.8.0-Beta'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'org.goormton'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

dependencies {
	/* Spring Starter */
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.testng:testng:7.1.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	/* Spring Actuator */
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	
	/* Spring Data JPA */
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	
	/* Swagger */
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.13'
	
	/* Java .csv Open Library */
	implementation group: 'com.opencsv', name: 'opencsv', version: '4.4'
	
	/* Joda Date Time */
	implementation 'joda-time:joda-time:2.12.1'
	
	/* Kotlin */
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	
	/* Database */
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	
	/* Spring Security */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	/* Jwt */
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	
	/* Lombok */
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	/* Spring Rest Docs */
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

/* Spring Rest Docs */
ext {
	snippetsDir = file("$buildDir/generated-snippets")
}
test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	delete file("src/main/resources/static/docs")
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into "static/docs"
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("$buildDir/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}
/* End Spring Rest Docs*/


/* Kotlin */
compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
/* End Kotlin */
